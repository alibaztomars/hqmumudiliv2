# coding: utf8
import random
def find_last(text, char_list):
    last_index = -1
    last_char = None

    for char in char_list:
        index = text.rfind(char)
        if index > last_index:
            last_index = index
            last_char = char

    return last_char, last_index

def custom_to_normal(custom):
    nums = {'s': 0, 'P': 1, 'ь': 2, 'г': 3, 'K': 4, 'ĵ': 5, 'й': 6, 'y': 7, 'é': 8, '\\': 9, 'ъ': 10, '3': 11, 'B': 12, 'а': 13, '&': 14, 'b': 15, 'C': 16, 'n': 17, 'e': 18, 'ĉ': 19, '>': 20, '%': 21, 'А': 22, 'A': 23, 'з': 24, 'V': 25, 'Ч': 26, '_': 27, 'ф': 28, 'ŝ': 29, 'Ö': 30, '5': 31, 'û': 32, 'H': 33, 'э': 34, '7': 35, 'ß': 36, 'Щ': 37, 'W': 38, 'ж': 39, ')': 40, '2': 41, 'Ь': 42, 'x': 43, 'Ŭ': 44, 'm': 45, 'U': 46, 'q': 47, 'Ĵ': 48, 'J': 49, 'ё': 50, 'ĥ': 51, 'ü': 52, 'N': 53, 'ô': 54, 't': 55, 'I': 56, 'н': 57, '6': 58, 'ö': 59, '}': 60, 'i': 61, 'Ю': 62, '$': 63, 'á': 64, 'ñ': 65, 'Ğ': 66, 'p': 67, 'Ё': 68, 'd': 69, 'ю': 70, 'Ş': 71, 'ê': 72, '@': 73, 'х': 74, 'в': 75, 'u': 76, 'у': 77, '/': 78, 'í': 79, 'Н': 80, 'У': 81, ']': 82, 'c': 83, '!': 84, 'ç': 85, 'К': 86, 'E': 87, 'w': 88, 'g': 89, 'j': 90, 'Д': 91, 'Й': 92, 'к': 93, 'я': 94, 'h': 95, 'v': 96, '-': 97, 'Ü': 98, 'ó': 99, ':': 100, 'ğ': 101, 'o': 102, '[': 103, 'î': 104, '~': 105, 'ч': 106, 'м': 107, '#': 108, 'ú': 109, 'Ĉ': 110, 'D': 111, '^': 112, 'M': 113, 'İ': 114, 'О': 115, '8': 116, '"': 117, 'z': 118, 'ц': 119, '{': 120, 'ĝ': 121, '1': 122, '4': 123, 'Э': 124, ',': 125, '`': 126, 'т': 127, 'Р': 128, '9': 129, 'ш': 130, 'f': 131, '(': 132, 'ŷ': 133, 'л': 134, '+': 135, '=': 136, 'Ĝ': 137, 'е': 138, 'a': 139, 'и': 140, 'R': 141, '*': 142, 'Б': 143, 'Ĥ': 144, 'ş': 145, 'Ы': 146, 'r': 147, 'Q': 148, 'G': 149, 'Е': 150, 'ы': 151, 'T': 152}
    power = 0
    normal = 0
    for element in custom[::-1]:
        normal += nums[element] * 152 ** power
        power += 1
    return normal

def normal_to_custom(normal):
    nums = {0: 's', 1: 'P', 2: 'ь', 3: 'г', 4: 'K', 5: 'ĵ', 6: 'й', 7: 'y', 8: 'é', 9: '\\', 10: 'ъ', 11: '3', 12: 'B', 13: 'а', 14: '&', 15: 'b', 16: 'C', 17: 'n', 18: 'e', 19: 'ĉ', 20: '>', 21: '%', 22: 'А', 23: 'A', 24: 'з', 25: 'V', 26: 'Ч', 27: '_', 28: 'ф', 29: 'ŝ', 30: 'Ö', 31: '5', 32: 'û', 33: 'H', 34: 'э', 35: '7', 36: 'ß', 37: 'Щ', 38: 'W', 39: 'ж', 40: ')', 41: '2', 42: 'Ь', 43: 'x', 44: 'Ŭ', 45: 'm', 46: 'U', 47: 'q', 48: 'Ĵ', 49: 'J', 50: 'ё', 51: 'ĥ', 52: 'ü', 53: 'N', 54: 'ô', 55: 't', 56: 'I', 57: 'н', 58: '6', 59: 'ö', 60: '}', 61: 'i', 62: 'Ю', 63: '$', 64: 'á', 65: 'ñ', 66: 'Ğ', 67: 'p', 68: 'Ё', 69: 'd', 70: 'ю', 71: 'Ş', 72: 'ê', 73: '@', 74: 'х', 75: 'в', 76: 'u', 77: 'у', 78: '/', 79: 'í', 80: 'Н', 81: 'У', 82: ']', 83: 'c', 84: '!', 85: 'ç', 86: 'К', 87: 'E', 88: 'w', 89: 'g', 90: 'j', 91: 'Д', 92: 'Й', 93: 'к', 94: 'я', 95: 'h', 96: 'v', 97: '-', 98: 'Ü', 99: 'ó', 100: ':', 101: 'ğ', 102: 'o', 103: '[', 104: 'î', 105: '~', 106: 'ч', 107: 'м', 108: '#', 109: 'ú', 110: 'Ĉ', 111: 'D', 112: '^', 113: 'M', 114: 'İ', 115: 'О', 116: '8', 117: '"', 118: 'z', 119: 'ц', 120: '{', 121: 'ĝ', 122: '1', 123: '4', 124: 'Э', 125: ',', 126: '`', 127: 'т', 128: 'Р', 129: '9', 130: 'ш', 131: 'f', 132: '(', 133: 'ŷ', 134: 'л', 135: '+', 136: '=', 137: 'Ĝ', 138: 'е', 139: 'a', 140: 'и', 141: 'R', 142: '*', 143: 'Б', 144: 'Ĥ', 145: 'ş', 146: 'Ы', 147: 'r', 148: 'Q', 149: 'G', 150: 'Е', 151: 'ы', 152: 'T'}
    remainders = []
    custom = ""
    while normal != 0:
        remainders.append(int(normal % 152))
        normal = int(normal / 152)
    for element in remainders[::-1]:
        custom += nums[element]
    return custom

def encrypt(to_encrypt):
    encrypted = ""
    splitter = {'ŭ': 1, 'п': 2, 'Z': 3, 'д': 4, 'F': 5, 'l': 6, 'Y': 7, 'Я': 8, 'о': 9, 'Г': 10, 'р': 11, 'З': 12, 'М': 13, 'â': 14, 'Ш': 15, 'С': 16, 'Ä': 17, 'Ъ': 18, 'L': 19, 'S': 20, "'": 21, 'O': 22, 'Л': 23, '|': 24, 'с': 25, '<': 26, 'И': 27, 'X': 28, 'Ц': 29, 'k': 30, '0': 31, ';': 32, 'Ж': 33, 'Т': 34, '?': 35, 'Х': 36, 'Ç': 37, 'В': 38, '.': 39, 'П': 40, 'щ': 41, 'Ф': 42, 'б': 43}
    keyboard = {'\n': 124561, 'i': 124105, ' ': 32419,'Q': 117292, 'W': 81703, 'E': 4325, 'R': 128645, 'T': 118344, 'Y': 139308, 'U': 142140, 'I': 24284, 'O': 72228, 'P': 159785, 'Ğ': 69748, 'Ü': 148490, 'A': 59876, 'S': 83198, 'D': 56967, 'F': 51247, 'G': 10397, 'H': 165775, 'J': 19678, 'K': 64062, 'L': 51730, 'Ş': 44389, 'İ': 137405, 'Z': 54086, 'X': 124650, 'C': 49841, 'V': 172300, 'B': 185340, 'N': 58086, 'M': 195388, 'Ö': 106180, 'Ç': 120152, 'q': 48524, 'w': 98110, 'e': 101174, 'r': 63028, 't': 158182, 'y': 159037, 'u': 129867, 'ı': 43167, 'o': 75651, 'p': 108402, 'ğ': 126569, 'ü': 6597, 'a': 120177, 's': 107516, 'd': 153824, 'f': 198552, 'g': 64716, 'h': 145645, 'j': 196255, 'k': 51773, 'l': 31286, 'ş': 181414, 'i̇': 34343, 'z': 129711, 'x': 113892, 'c': 39792, 'v': 104332, 'b': 175378, 'n': 101908, 'm': 167684, 'ö': 192813, 'ç': 77206, '1': 84009, '2': 80405, '3': 113956, '4': 181395, '5': 4292, '6': 130551, '7': 92689, '8': 86223, '9': 126006, '0': 152365, '!': 157752, '@': 78688, '#': 137356, '$': 135818, '%': 107167, '^': 11452, '&': 156579, '*': 73790, '(': 96392, ')': 165183, '_': 111260, '+': 33719, '-': 106517, '=': 199913, '[': 165911, ']': 179052, '{': 180845, '}': 27337, '|': 112189, '\\': 113201, ';': 9965, ':': 150097, "'": 62867, '"': 91223, ',': 87665, '.': 160327, '/': 66598, '<': 177589, '>': 45960, '?': 155758}
    for char in to_encrypt:
        chosen_splitter = random.choice(list(splitter.keys()))
        buffer = splitter[chosen_splitter]
        encrypted += normal_to_custom(keyboard[char] * buffer) + chosen_splitter
    if random.randint(1, 100) in range(1, 50): #removing last char as a chance (because its splitter and we dont want to use it at last %100 or we dont want to use it at last %100 because if we do it, it will be decrypted very easily) and we are using the splitter before the last char to convert as a common buffer
        last_char_of_to_encrypt = to_encrypt[len(to_encrypt) - 1]
        encrypted = encrypted[:-1]
        results_from_find_last = find_last(encrypted, list(splitter.keys()))
        last_char, last_index = results_from_find_last[0], results_from_find_last[1]
        encrypted = encrypted[:last_index + 1]
        encrypted += normal_to_custom(keyboard[last_char_of_to_encrypt] * splitter[last_char])
        return encrypted
    else:
        return encrypted

def decrypt(to_decrypt):
    decrypted = ""
    splitted_numbers_to_convert = []
    buffers = []
    keyboard = {124561: '\n', 124105: "i", 32419: ' ', 117292: 'Q', 81703: 'W', 4325: 'E', 128645: 'R', 118344: 'T', 139308: 'Y', 142140: 'U', 24284: 'I', 72228: 'O', 159785: 'P', 69748: 'Ğ', 148490: 'Ü', 59876: 'A', 83198: 'S', 56967: 'D', 51247: 'F', 10397: 'G', 165775: 'H', 19678: 'J', 64062: 'K', 51730: 'L', 44389: 'Ş', 137405: 'İ', 54086: 'Z', 124650: 'X', 49841: 'C', 172300: 'V', 185340: 'B', 58086: 'N', 195388: 'M', 106180: 'Ö', 120152: 'Ç', 48524: 'q', 98110: 'w', 101174: 'e', 63028: 'r', 158182: 't', 159037: 'y', 129867: 'u', 43167: 'ı', 75651: 'o', 108402: 'p', 126569: 'ğ', 6597: 'ü', 120177: 'a', 107516: 's', 153824: 'd', 198552: 'f', 64716: 'g', 145645: 'h', 196255: 'j', 51773: 'k', 31286: 'l', 181414: 'ş', 34343: 'i̇', 129711: 'z', 113892: 'x', 39792: 'c', 104332: 'v', 175378: 'b', 101908: 'n', 167684: 'm', 192813: 'ö', 77206: 'ç', 84009: '1', 80405: '2', 113956: '3', 181395: '4', 4292: '5', 130551: '6', 92689: '7', 86223: '8', 126006: '9', 152365: '0', 157752: '!', 78688: '@', 137356: '#', 135818: '$', 107167: '%', 11452: '^', 156579: '&', 73790: '*', 96392: '(', 165183: ')', 111260: '_', 33719: '+', 106517: '-', 199913: '=', 165911: '[', 179052: ']', 180845: '{', 27337: '}', 112189: '|', 113201: '\\', 9965: ';', 150097: ':', 62867: "'", 91223: '"', 87665: ',', 160327: '.', 66598: '/', 177589: '<', 45960: '>', 155758: '?'}
    splitter = {'ŭ': 1, 'п': 2, 'Z': 3, 'д': 4, 'F': 5, 'l': 6, 'Y': 7, 'Я': 8, 'о': 9, 'Г': 10, 'р': 11, 'З': 12, 'М': 13, 'â': 14, 'Ш': 15, 'С': 16, 'Ä': 17, 'Ъ': 18, 'L': 19, 'S': 20, "'": 21, 'O': 22, 'Л': 23, '|': 24, 'с': 25, '<': 26, 'И': 27, 'X': 28, 'Ц': 29, 'k': 30, '0': 31, ';': 32, 'Ж': 33, 'Т': 34, '?': 35, 'Х': 36, 'Ç': 37, 'В': 38, '.': 39, 'П': 40, 'щ': 41, 'Ф': 42, 'б': 43}
    current_splitted = ""
    for sym in to_decrypt:
        if sym in splitter:
            splitted_numbers_to_convert.append(current_splitted)
            current_splitted = ""
            buffers.append(splitter[sym])
        else:
            current_splitted += sym
    index_counter = 0
    for number_to_convert in splitted_numbers_to_convert:
        decrypted += keyboard[custom_to_normal(number_to_convert) / buffers[index_counter]]
        index_counter += 1
    if to_decrypt[len(to_decrypt) - 1] not in splitter: #using last splitter common as a buffer if the last char is not a splitter
        results_from_find_last = find_last(to_decrypt, list(splitter.keys()))
        last_char, last_index = results_from_find_last[0], results_from_find_last[1]
        last_char_to_convert = to_decrypt[last_index + 1:]
        decrypted += keyboard[custom_to_normal(last_char_to_convert) / splitter[last_char]]
        
    return decrypted